intrinsic indicator(M::LMFDBRepCC) -> FldRatElt
  {Computes the Frobenius-Schur indicator}
  Mat := MatrixGroup(M`MagmaRep);
  ind := 0;
  for g in Mat do
    ind +:= Trace(g^2);
  end for;
  return (1/Get(M,'order'))*ind;
end intrinsic;

intrinsic cyc_order_mat(M::LMFDBRepCC) -> RngIntElt
  {an integer m so that the entries in the gens column lie in CyclotomicField(m)}
  //u:= AbsoluteModuleOverMinimalField(gmodule);â€¨   DefiningPolynomial(CoefficientRing(u));
  MM := M`MagmaRep;
  MMmin := AbsoluteModuleOverMinimalField(MM);
  return Conductor(CoefficientRing(MMmin));
end intrinsic;

intrinsic schur_index(M::LMFDBRepCC) -> RngIntElt
  {Returns the ratio of the minimal degree of a number field containing all matrix entries by the degree of the number field generated by the traces}
  m := Get(M, "cyc_order_mat");
  n := Get(M, "cyc_order_traces");
  assert m mod n eq 0;
  return m div n;
end intrinsic;
