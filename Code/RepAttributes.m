intrinsic order(M::LMFDBRepCC) -> FldRatElt
  {Return order of the group}
  return (M`MagmaGrp)`order;
end intrinsic;

intrinsic indicator(M::LMFDBRepCC) -> FldRatElt
  {Computes the Frobenius-Schur indicator}
  Mat := M`MagmaGrp;
  ind := 0;
  for g in Mat do
    ind +:= Trace(g^2);
  end for;
  return (1/Get(M,'order'))*ind;
end intrinsic;

intrinsic cyc_order_mat(M::LMFDBRepCC) -> RngIntElt
  {an integer m so that the entries in the gens column lie in CyclotomicField(m)}
  MM := M`MagmaRep;
  MMmin := AbsoluteModuleOverMinimalField(MM);
  return Conductor(CoefficientRing(MMmin));
end intrinsic;

intrinsic schur_index(M::LMFDBRepCC) -> RngIntElt
  {Returns the ratio of the minimal degree of a number field containing all matrix entries by the degree of the number field generated by the traces}
  m := Get(M, "cyc_order_mat");
  n := Get(M, "cyc_order_traces");
  assert m mod n eq 0;
  return m div n;
end intrinsic;

intrinsic AbsoluteModuleOverMinimalField(~M::LMFDBRepCC)
  {Assign to M`MagmaRep the absolutely irreducible module M over the smallest possible field without increasing the dimension of the module. Also assign M`MagmaGrp to be the corresponding group.}
  MM := M`MagmaRep;
  MMmin := AbsoluteModuleOverMinimalField(MM);
  M`MagmaRep := MMmin;
  M`MagmaGrp := MatrixGroup(MMmin);
  print "Module over minimal field computed and assigned";
end intrinsic;
